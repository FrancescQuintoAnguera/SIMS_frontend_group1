<?php
require_once __DIR__ . '/../core/DatabaseMariaDB.php';

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: http://localhost:8080');
header('Access-Control-Allow-Credentials: true');

session_start();

if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'message' => 'No autoritzat']);
    exit;
}

$user_id = $_SESSION['user_id'];

try {
    $input = json_decode(file_get_contents('php://input'), true);
    
    // Log para debug
    error_log("Input recibido: " . print_r($input, true));
    
    $type = isset($input['type']) ? trim($input['type']) : 'monthly'; // Limpiar espacios
    
    error_log("Tipo después de procesar: '$type' (length: " . strlen($type) . ")");
    
    // Validar que sea uno de los valores permitidos
    if (!in_array($type, ['monthly', 'annual'], true)) {
        throw new Exception('Tipus de subscripció no vàlid: ' . $type);
    }
    
    // Precios actualizados más asequibles
    $prices = [
        'monthly' => 4.99,
        'annual' => 49.99
    ];
    
    $price = $prices[$type];
    
    // Calcular fechas
    $start_date = date('Y-m-d');
    if ($type === 'monthly') {
        $end_date = date('Y-m-d', strtotime('+1 month'));
    } else {
        $end_date = date('Y-m-d', strtotime('+1 year'));
    }
    
    $conn = DatabaseMariaDB::getConnection();
    
    // Iniciar transacción
    $conn->beginTransaction();
    
    // Verificar si las tablas existen
    $tableCheck = $conn->query("SHOW TABLES LIKE 'premium_subscriptions'");
    if ($tableCheck->rowCount() == 0) {
        throw new Exception('Sistema Premium no instal·lat. Executa update-premium-system.sql');
    }
    
    // Cancelar suscripciones activas anteriores
    $stmt = $conn->prepare("UPDATE premium_subscriptions SET status = 'cancelled' WHERE user_id = ? AND status = 'active'");
    $stmt->execute([$user_id]);
    
    // Crear nueva suscripción
    error_log("Insertando suscripción - user_id: $user_id, type: '$type', start: $start_date, end: $end_date, price: $price");
    
    $stmt = $conn->prepare("
        INSERT INTO premium_subscriptions 
        (user_id, type, status, start_date, end_date, price, auto_renew) 
        VALUES (?, ?, 'active', ?, ?, ?, 1)
    ");
    
    if (!$stmt) {
        throw new Exception("Error preparando statement: " . $conn->error);
    }
    
    // bind_param removed - use array params in execute()
    
    if (!$stmt->execute()) {
        throw new Exception("Error ejecutando insert: " . $stmt->error);
    }
    
    error_log("Suscripción insertada correctamente con ID: " . $stmt->insert_id);
    
    // Actualizar usuario
    error_log("Actualizando usuario - is_premium=1, premium_expires_at='$end_date' para user_id=$user_id");
    
    $stmt = $conn->prepare("UPDATE users SET is_premium = 1, premium_expires_at = ? WHERE id = ?");
    
    if (!$stmt) {
        throw new Exception("Error preparando UPDATE users: " . $conn->error);
    }
    
    // bind_param removed - use array params in execute()
    
    if (!$stmt->execute()) {
        throw new Exception("Error actualizando usuario: " . $stmt->error);
    }
    
    error_log("Usuario actualizado correctamente");
    
    // Bonificar puntos iniciales (equivalente a 15 minutos = 200 puntos)
    $bonus_points = 200;
    
    error_log("Añadiendo bonus de $bonus_points puntos");
    
    // Verificar si existe el registro en user_points
    $checkStmt = $conn->prepare("SELECT user_id FROM user_points WHERE user_id = ?");
    $checkStmt->execute([$user_id]);
    $exists = $checkStmt->get_result()->rowCount() > 0;
    
    error_log("Usuario " . ($exists ? "tiene" : "NO tiene") . " registro en user_points");
    
    if (!$exists) {
        // Crear registro nuevo con puntos de bonus
        $stmt = $conn->prepare("INSERT INTO user_points (user_id, points, total_purchased) VALUES (?, ?, ?)");
        
        if (!$stmt) {
            throw new Exception("Error preparando INSERT user_points: " . $conn->error);
        }
        
        // bind_param removed - use array params in execute()
        
        if (!$stmt->execute()) {
            throw new Exception("Error insertando puntos: " . $stmt->error);
        }
        
        error_log("Puntos iniciales insertados");
    } else {
        // Actualizar puntos existentes
        $stmt = $conn->prepare("UPDATE user_points SET points = points + ?, total_purchased = total_purchased + ? WHERE user_id = ?");
        
        if (!$stmt) {
            throw new Exception("Error preparando UPDATE user_points: " . $conn->error);
        }
        
        // bind_param removed - use array params in execute()
        
        if (!$stmt->execute()) {
            throw new Exception("Error actualizando puntos: " . $stmt->error);
        }
        
        error_log("Puntos actualizados");
    }
    
    // Registrar transacción de bono inicial
    $description = "Bonus d'activació Premium - 15 minuts gratuïts";
    
    error_log("Registrando transacción de bonus");
    
    $stmt = $conn->prepare("
        INSERT INTO point_transactions 
        (user_id, type, points, price, description) 
        VALUES (?, 'premium_bonus', ?, 0.00, ?)
    ");
    
    if (!$stmt) {
        throw new Exception("Error preparando INSERT point_transactions: " . $conn->error);
    }
    
    // bind_param removed - use array params in execute()
    
    if (!$stmt->execute()) {
        throw new Exception("Error insertando transacción: " . $stmt->error);
    }
    
    error_log("Transacción registrada");
    
    error_log("✅ TODO COMPLETADO - Haciendo commit");
    
    $conn->commit();
    
    error_log("✅ Premium activado exitosamente para user_id=$user_id");
    
    echo json_encode([
        'success' => true,
        'message' => 'Subscripció activada amb èxit!',
        'subscription' => [
            'type' => $type,
            'price' => $price,
            'start_date' => $start_date,
            'end_date' => $end_date,
            'bonus_points' => $bonus_points
        ]
    ]);
    
} catch (Exception $e) {
    if (isset($conn)) {
        $conn->rollback();
    }
    echo json_encode([
        'success' => false,
        'message' => 'Error al activar la subscripció',
        'error' => $e->getMessage()
    ]);
}
?>
